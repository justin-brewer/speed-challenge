README

About :

  This project was started in response to comma.ai's speed challenge:
  http://commachallenge.s3-us-west-2.amazonaws.com/speed_challenge_2017.tar
  Predict the speed of a moving vehicle using only its dash cam footage and
  a labeled training set.

Approach :

  Calculate dense optical flow with OpenCV's Farneback implementation.
  Shrink the data using spline interpolation.
  Fully-connected, feedforward network with Tensorflow: four hidden layers -
  3 x relu + softmax. The output layer's weights are not trainable and I used
  mean squared error loss (1). Data is shuffled before being split into
  train and test sets. Bootstrap aggregation is used to pick the batch at each
  training step. 50% dropout was used during training.

Results :

  MSE of 48.1 (awful) on the test set despite MSE of 1.8 training/validating
  at 50/50. I belive this was due to randomly shuffling before splitting
  the data. The optic flow calculations don't seem to change significantly
  between subsequent frames, so this created, essentially, a lot of
  duplication between the training and validation sets causing massive
  overfitting.

Future Work :

  With the level of overfitting this model resulted in, future work
  will require much more data and possibly a totally different approach.

Files:

  save_opflow.py :

    Dense Optical flow, calculated with OpensCV's implementation
    of the Farneback Algorithm: 'cv2.calcOpticalFlowFarneback()'.
    It is then shrunk by a factor of 16 with Scipy's Zoom, which uses
    spline interpolation. Then vectorized and saved in a .npy file.

  network.py :

    Tensorflow model with four hidden layers : 3 x relu + softmax
    hidden and final layers weights are not learnable (1).
    Trains model, then saves it as .ckpt. 

  load_saved.py :

    Loads saved models by name, runs them on new data, then saves
    the model's predictions to a .npy file

  show_vid.py :

    Shows videos with speed predictions in m/s and mph.

* Note : lines in files where file names go are marked with '#37'

Dependencies/tools:
    numpy==1.13.1
    opencv-python==3.3.0.9
    scipy==0.19.1
    tensorflow==1.2.1
    Python 3.6.2

Sources :

1) Beckham, C., & Pal, C. (2016). A simple squared-error reformulation for
  ordinal classification. arXiv preprint arXiv:1612.00775.

2) Dosovitskiy, A., Fischer, P., Ilg, E., Hausser, P., Hazirbas, C., Golkov, V.,
  ... & Brox, T. (2015). Flownet: Learning optical flow with convolutional networks.
  In Proceedings of the IEEE International Conference on Computer Vision (pp. 2758-2766).
